{
  "author": {
    "name": "GlitchMr",
    "email": "glitchmr@myopera.com",
    "url": "http://glitchmr.github.com"
  },
  "name": "binary-string",
  "description": "Binary string because binary encoding still has its uses.",
  "version": "1.0.0",
  "keywords": [
    "string",
    "binary",
    "encoding"
  ],
  "homepage": "http://github.com/GlitchMr/binary-string",
  "bugs": {
    "url": "http://github.com/GlitchMr/binary-string/issues"
  },
  "main": "./lib/binary-string",
  "repository": {
    "type": "git",
    "url": "https://github.com/GlitchMr/binary-string.git"
  },
  "scripts": {
    "test": "node test/test"
  },
  "readme": "[![Build Status](https://secure.travis-ci.org/GlitchMr/binary-string.png?branch=master)](http://travis-ci.org/GlitchMr/binary-string) \n\nBinary strings still have their uses. Don't let huge warning of Node.js\nstop you from using them. There are valid reasons to use binary strings\ninstead of low-level `Buffer`s. Who cares about performance? If we\nwould care so much, we all would write in assembly :-).\n\nThis module will try to use Node.js binary strings if you are using\nversion create before their removal (while destroying all warnings\nabout them). If your Node.js version doesn't have binary strings, they\nare emulated which makes them even slower (but well, you have them,\nand if you care about performance, write in assembly).\n\nUnlike `Buffer`s, you can do anything you can with normal strings on\nbinary strings (internally, they are normal strings). You can use\nregular expressions, you can compare them, you can use string methods\non them, you can use them as object keys. The only disadvantage is that\nyou cannot easily change single characters (this is probably only real\nadvantage of `Buffer`s).\n\n```javascript\nvar binaryString = require('binary-string'),\n    // Converts buffer to binary string\n    fromBuffer   = binaryString.fromBuffer,\n    // Converts binary string to buffer\n    toBuffer     = binaryString.toBuffer\n```\n",
  "readmeFilename": "README.md",
  "_id": "binary-string@1.0.0",
  "dist": {
    "shasum": "5db1fa8020d4916f06a1124d2bb3a5a1c3a9f37e"
  },
  "_from": "binary-string@",
  "_resolved": "https://registry.npmjs.org/binary-string/-/binary-string-1.0.0.tgz"
}
